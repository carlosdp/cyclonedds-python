name: build-cyclonedds-wheels

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS x86_64
          - os: macos-13
            arch: x86_64
            plat: macosx
          # macOS arm64
          - os: macos-14
            arch: arm64
            plat: macosx
          # Linux x86_64
          - os: ubuntu-22.04
            arch: x86_64
            plat: manylinux
          # Linux aarch64 (emulated via qemu)
          - os: ubuntu-22.04
            arch: aarch64
            plat: manylinux

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python (host, cibuildwheel runner)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel==2.20.0

      # Only for Linux: QEMU to build aarch64 on x86_64 host
      - name: Set up QEMU (Linux only)
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels (cp312)
        env:
          # Select only CPython 3.12 wheels
          CIBW_BUILD: "cp312-*"
          # Avoid musllinux for now
          CIBW_SKIP: "pp* *-musllinux_*"
          # Mac architectures (cibuildwheel will build each runner arch natively)
          CIBW_ARCHS_MACOS: "${{ matrix.arch }}"
          # Linux architectures (cibuildwheel will use manylinux Docker images)
          CIBW_ARCHS_LINUX: "${{ matrix.arch }}"

          # Manylinux image tags
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64:2025.07.27-1"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64:2025.07.27-1"

          # --- IMPORTANT ---
          # We *replicate* the project's default before_all (clone + mkdirs),
          # plus we install toolchain on Linux containers. Guards avoid re-clone.
          CIBW_BEFORE_ALL_LINUX: |
            set -eux
            (yum -y install git cmake ninja-build openssl-devel || dnf -y install git cmake ninja-build openssl-devel)
            if [ ! -d main/.git ]; then
              git clone --branch master --depth 1 https://github.com/eclipse-cyclonedds/cyclonedds.git main
            fi
            mkdir -p cyclonedds-build build

          CIBW_BEFORE_ALL_MACOS: |
            set -eux
            if [ ! -d main/.git ]; then
              git clone --branch master --depth 1 https://github.com/eclipse-cyclonedds/cyclonedds.git main
            fi
            mkdir -p cyclonedds-build build

          # If you still hit header errors, uncomment the next two lines to help the C layer
          # find private ddsi headers directly from the source tree (path is correct for current core):
          # CIBW_ENVIRONMENT_MACOS: 'CFLAGS="$CFLAGS -I$(pwd)/main/src/core/ddsi/include"'
          # CIBW_ENVIRONMENT_LINUX: 'CFLAGS="$CFLAGS -I$(pwd)/main/src/core/ddsi/include"'

        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels (each file as a separate artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.arch }}-${{ github.run_id }}
          path: wheelhouse/*.whl
          if-no-files-found: error
          compression-level: 0

